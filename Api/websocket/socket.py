import json
from fastapi import WebSocket, WebSocketDisconnect
from auth.utils import verify_token
from database import get_db
from models.user import User
from sqlalchemy.orm import Session
from fastapi import FastAPI, HTTPException
from pathlib import Path
import base64
import uuid
import httpx
from fastapi.staticfiles import StaticFiles

from models.user import Request

# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
IMAGES_DIR = Path("static/images")
IMAGES_DIR.mkdir(parents=True, exist_ok=True)
# URL –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
GENERATOR_URL = "https://ai.katuscha.ssrv.su/sdapi/v1/txt2img"


async def websocket_endpoint(websocket: WebSocket):
    token = websocket.query_params.get("token")
    user_login = verify_token(token)

    if user_login is None:
        await websocket.close(code=1008)
        return

    await websocket.accept()
    await websocket.send_text(f"üîê Welcome, {user_login}!")

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db: Session = next(get_db())

    try:
        while True:
            data = await websocket.receive_text()
            try:
                message = json.loads(data)
                action = message.get("action")

                if action == "text":
                    text_content = message.get("text")
                    if not text_content:
                        await websocket.send_json({
                            "status": "error",
                            "message": "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                        })
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞—è–≤–∫–∞ —Å —Ç–∞–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user = db.query(User).filter(User.login == user_login).first()
                    if not user:
                        await websocket.send_json({
                            "status": "error",
                            "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                        })
                        continue

                    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —É –Ω–∞—Å –µ—Å—Ç—å –º–æ–¥–µ–ª—å Request (–∑–∞—è–≤–∫–∞), –∫–æ—Ç–æ—Ä–∞—è —Ö—Ä–∞–Ω–∏—Ç —Ç–µ–∫—Å—Ç –∏ user_id
                    existing_request = db.query(Request).filter(
                        Request.user_id == user.id,
                        Request.text == text_content
                    ).first()

                    if existing_request:
                        await websocket.send_json({
                            "status": "error",
                            "message": "–ó–∞—è–≤–∫–∞ —Å —Ç–∞–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                        })
                        continue

                    new_request = Request(
                        user_id=user.id,
                        text=text_content,
                        status="pending"
                    )
                    db.add(new_request)
                    db.commit()

                    await websocket.send_json({
                        "status": "success",
                        "message": "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
                        "request_id": new_request.id
                    })

                elif action == "image":
                    try:
                        async with httpx.AsyncClient() as client:
                            response = await client.post(
                                GENERATOR_URL,
                                json={"prompt": "puppy dog", "steps": 50}
                            )
                            response.raise_for_status()
                    except Exception as e:
                        await websocket.send_json({
                            "status": "error",
                            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—É: {e}"
                        })
                        return

                    data = response.json()
                    images_b64 = data.get("images", [])
                    if not images_b64:
                        await websocket.send_json({
                            "status": "error",
                            "message": "–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
                        })
                        return

                    for image_b64 in images_b64:
                        filename = f"{uuid.uuid4().hex}.png"
                        filepath = IMAGES_DIR / filename

                        with open(filepath, "wb") as f:
                            f.write(base64.b64decode(image_b64))

                        image_url = f"/static/images/{filename}"

                    await websocket.send_json({
                        "status": "success",
                        "image_urls": image_url
                    })
                elif action == "music":
                    await websocket.send_json({
                        "status": "success",
                        "message": "E"
                    })
                elif action == "all":
                    await websocket.send_json({
                        "status": "success",
                        "message": "E"
                    })
                else:
                    await websocket.send_json({
                        "status": "error",
                        "message": "Invalid action"
                    })
            except json.JSONDecodeError:
                await websocket.send_json({
                    "status": "error",
                    "message": "–ò–Ω–≤–∞–ª–∏–¥–Ω—ã–π –¥–∂–µ–π—Å–æ–Ω —Å—Ç–µ—Ç—Ö–µ–º"
                })
            except KeyError as e:
                await websocket.send_json({
                    "status": "error",
                    "message": f"–ü—É–ø—É–ø—É–ø—É –æ—à–∏–±–∫–∞: {e}"
                })
            except Exception as e:
                await websocket.send_json({
                    "status": "error",
                    "message": f"–°–µ—Ä–≤–µ—Ä –∞—Ä–±—É–∑: {str(e)}"
                })
    except WebSocketDisconnect:
        print(f"{user_login} disconnected")
    finally:
        db.close()