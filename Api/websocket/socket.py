import json
from fastapi import WebSocket, WebSocketDisconnect
from auth.utils import verify_token
from database import get_db
from models.user import User, Request, GeneratedFile
from schemas.user import FileType
from sqlalchemy.orm import Session
from sqlalchemy.exc import IntegrityError
from pathlib import Path
import base64
import uuid
import httpx
from datetime import datetime

IMAGES_DIR = Path("static/images")
IMAGES_DIR.mkdir(parents=True, exist_ok=True)
GENERATOR_URL = "https://ai.katuscha.ssrv.su/sdapi/v1/txt2img"

async def websocket_endpoint(websocket: WebSocket):
    token = websocket.query_params.get("token")
    user_login = verify_token(token)

    if user_login is None:
        await websocket.close(code=1008)
        return

    await websocket.accept()
    await websocket.send_text(f"üîê Welcome, {user_login}!")

    db: Session = next(get_db())
    
    try:
        while True:
            data = await websocket.receive_text()
            try:
                message = json.loads(data)
                action = message.get("action")
                text_content = message.get("text")  # –¢–µ–∫—Å—Ç —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
                
                if not text_content:
                    await websocket.send_json({
                        "status": "error",
                        "message": "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
                    })
                    continue
                
                user = db.query(User).filter(User.login == user_login).first()
                if not user:
                    await websocket.send_json({
                        "status": "error",
                        "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    })
                    continue
                
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É —Å —Ç–∞–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
                request = db.query(Request).filter(
                    Request.user_id == user.id,
                    Request.text == text_content
                ).first()
                
                # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                if not request:
                    try:
                        request = Request(
                            user_id=user.id,
                            text=text_content,
                            status="pending"
                        )
                        db.add(request)
                        db.commit()
                        db.refresh(request)
                        await websocket.send_json({
                            "status": "info",
                            "message": "–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞",
                            "request_text": text_content
                        })
                    except IntegrityError:
                        db.rollback()
                        request = db.query(Request).filter(
                            Request.user_id == user.id,
                            Request.text == text_content
                        ).first()
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
                if action == "text":
                    await websocket.send_json({
                        "status": "success",
                        "message": "–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∑–∞—è–≤–∫–µ",
                        "request_text": request.text
                    })
                
                elif action == "image":
                    try:
                        async with httpx.AsyncClient() as client:
                            response = await client.post(
                                GENERATOR_URL,
                                json={"prompt": text_content, "steps": 50}  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ prompt
                            )
                            response.raise_for_status()
                    except Exception as e:
                        await websocket.send_json({
                            "status": "error",
                            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}"
                        })
                        continue

                    data = response.json()
                    images_b64 = data.get("images", [])
                    if not images_b64:
                        await websocket.send_json({
                            "status": "error",
                            "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                        })
                        continue
                    
                    image_urls = []
                    for image_b64 in images_b64:
                        filename = f"{uuid.uuid4().hex}.png"
                        filepath = IMAGES_DIR / filename

                        with open(filepath, "wb") as f:
                            f.write(base64.b64decode(image_b64))

                        image_url = f"/static/images/{filename}"
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –∑–∞—è–≤–∫—É
                        new_file = GeneratedFile(
                            request_id=request.id,
                            file_url=image_url,
                            file_type=FileType.image
                        )
                        db.add(new_file)
                    
                    db.commit()
                    
                    await websocket.send_json({
                        "status": "success",
                        "message": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
                        "image_url": image_url,
                        "request_text": request.text
                    })
                
                elif action == "music":
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)
                    music_url = f"/static/music/{uuid.uuid4().hex}.mp3"
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –∑–∞—è–≤–∫—É
                    new_file = GeneratedFile(
                        request_id=request.id,
                        file_url=music_url,
                        file_type=FileType.music
                    )
                    db.add(new_file)
                    db.commit()
                    
                    await websocket.send_json({
                        "status": "success",
                        "message": "–ú—É–∑—ã–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞)",
                        "music_url": music_url,
                        "request_text": request.text
                    })
                
                elif action == "get_files":
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏
                    files = db.query(GeneratedFile).filter(
                        GeneratedFile.request_id == request.id
                    ).all()
                    
                    await websocket.send_json({
                        "status": "success",
                        "files": [{
                            "url": file.file_url,
                            "type": file.file_type
                        } for file in files],
                        "request_text": request.text
                    })
                
                else:
                    await websocket.send_json({
                        "status": "error",
                        "message": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
                    })
            
            except json.JSONDecodeError:
                await websocket.send_json({
                    "status": "error",
                    "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON"
                })
            except Exception as e:
                await websocket.send_json({
                    "status": "error",
                    "message": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
                })
    
    except WebSocketDisconnect:
        print(f"{user_login} –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
    finally:
        db.close()