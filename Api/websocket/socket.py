import json
from fastapi import WebSocket, WebSocketDisconnect
from auth.utils import verify_token

from fastapi import FastAPI, HTTPException
from pathlib import Path
import base64
import uuid
import httpx
from fastapi.staticfiles import StaticFiles

# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
IMAGES_DIR = Path("static/images")
IMAGES_DIR.mkdir(parents=True, exist_ok=True)
# URL –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
GENERATOR_URL = "https://ai.katuscha.ssrv.su/sdapi/v1/txt2img"


async def websocket_endpoint(websocket: WebSocket):
    token = websocket.query_params.get("token")
    user = verify_token(token)

    if user is None:
        await websocket.close(code=1008)
        return

    await websocket.accept()
    await websocket.send_text(f"üîê Welcome, {user}!")

    try:
        while True:
            data = await websocket.receive_text()
            try:
                message = json.loads(data)
                action = message.get("action")
                if action == "text":
                    await websocket.send_json({
                        "status": "success",
                        "message": "E"
                    })
                elif action == "image":
                    try:
                        async with httpx.AsyncClient() as client:
                            response = await client.post(
                                GENERATOR_URL,
                                json={"prompt": "puppy dog", "steps": 50}  # üëà —Ç—É—Ç –∏—Å–ø—Ä–∞–≤–∏–ª –Ω–∞ `json=...`, –Ω–µ `data=...`
                            )
                            response.raise_for_status()
                    except Exception as e:
                        await websocket.send_json({
                            "status": "error",
                            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—É: {e}"
                        })
                        return

                    data = response.json()
                    images_b64 = data.get("images", [])
                    if not images_b64:
                        await websocket.send_json({
                            "status": "error",
                            "message": "–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
                        })
                        return

                    saved_urls = []

                    for image_b64 in images_b64:
                        filename = f"{uuid.uuid4().hex}.png"
                        filepath = IMAGES_DIR / filename

                        with open(filepath, "wb") as f:
                            f.write(base64.b64decode(image_b64))

                        image_url = f"/static/images/{filename}"
                        saved_urls.append(image_url)

                    # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ —á–µ—Ä–µ–∑ WebSocket
                    await websocket.send_json({
                        "status": "success",
                        "image_urls": saved_urls
                    })
                elif action == "music":
                    await websocket.send_json({
                        "status": "success",
                        "message": "E"
                    })
                elif action == "all":
                    await websocket.send_json({
                        "status": "success",
                        "message": "E"
                    })
                else:
                    await websocket.send_json({
                        "status": "error",
                        "message": "Invalid action"
                    })
            except json.JSONDecodeError:
                await websocket.send_json({
                    "status": "error",
                    "message": "–ò–Ω–≤–∞–ª–∏–¥–Ω—ã–π –¥–∂–µ–π—Å–æ–Ω —Å—Ç–µ—Ç—Ö–µ–º"
                })
            except KeyError as e:
                await websocket.send_json({
                    "status": "error",
                    "message": f"–ü—É–ø—É–ø—É–ø—É –æ—à–∏–±–∫–∞: {e}"
                })
            except Exception as e:
                await websocket.send_json({
                    "status": "error",
                    "message": f"–°–µ—Ä–≤–µ—Ä –∞—Ä–±—É–∑: {str(e)}"
                })
    except WebSocketDisconnect:
        print(f"{user} disconnected")
