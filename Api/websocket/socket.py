import json
from config import IP_AI, IP_TEXT_AI
from schemas.user import FileType
from fastapi import WebSocket, WebSocketDisconnect
from auth.utils import verify_token
from database import get_db
from models.user import User, Request, GeneratedFile
from sqlalchemy.orm import Session
from pathlib import Path
import base64
import uuid
import httpx
from typing import Dict, List
from config import IP_AI, IP_TEXT_AI

IMAGES_DIR = Path("static/images")
IMAGES_DIR.mkdir(parents=True, exist_ok=True)
GENERATOR_IMG_URL = "https://"+IP_AI+"/sdapi/v1/txt2img"
GENERATOR_TEXT_URL = "http://"+IP_TEXT_AI+"/api/generate"

async def websocket_endpoint(websocket: WebSocket):
    token = websocket.query_params.get("token")
    user_login = verify_token(token)

    if user_login is None:
        await websocket.close(code=1008)
        return

    await websocket.accept()
    await websocket.send_text(f"üîê Welcome, {user_login}!")

    db: Session = next(get_db())

    try:
        while True:
            data = await websocket.receive_text()
            try:
                message = json.loads(data)
                action = message.get("action")

                if action == "get_history":
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user = db.query(User).filter(User.login == user_login).first()
                    if not user:
                        await websocket.send_json({
                            "status": "error",
                            "message": "User not found"
                        })
                        continue

                    requests = db.query(Request).filter(
                        Request.user_id == user.id
                    ).order_by(Request.id.desc()).all()

                    response = {"requests": []}

                    for req in requests:
                        files = db.query(GeneratedFile).filter(
                            GeneratedFile.request_id == req.id
                        ).all()

                        request_data = {
                            "id": req.id,
                            "reference_text": req.text,
                            "texts": [],
                            "images": [],
                            "music": [],
                            "gifts": []
                        }

                        for file in files:
                            if file.file_type == "text":
                                request_data["texts"].append(file.file_url)
                            elif file.file_type == "image":
                                request_data["images"].append(file.file_url)
                            elif file.file_type == "music":
                                request_data["music"].append(file.file_url)
                            elif file.file_type == "gift":
                                request_data["gifts"].append(file.file_url)

                        response["requests"].append(request_data)

                    await websocket.send_json({
                        "status": "success",
                        "data": response
                    })

                elif action == "get_request":
                    request_id = message.get("request_id")
                    if not request_id:
                        await websocket.send_json({
                            "status": "error",
                            "message": "Request ID is required"
                        })
                        continue

                    request = db.query(Request).filter(
                        Request.id == request_id,
                        Request.user_id == db.query(User.id).filter(User.login == user_login).scalar_subquery()
                    ).first()

                    if not request:
                        await websocket.send_json({
                            "status": "error",
                            "message": "Request not found"
                        })
                        continue

                    files = db.query(GeneratedFile).filter(
                        GeneratedFile.request_id == request.id
                    ).all()

                    request_data = {
                        "id": request.id,
                        "reference_text": request.text,
                        "texts": [],
                        "images": [],
                        "music": [],
                        "gifts": []
                    }

                    for file in files:
                        if file.file_type == "text":
                            request_data["texts"].append(file.file_url)
                        elif file.file_type == "image":
                            request_data["images"].append(file.file_url)
                        elif file.file_type == "music":
                            request_data["music"].append(file.file_url)
                        elif file.file_type == "gift":
                            request_data["gifts"].append(file.file_url)

                    await websocket.send_json({
                        "status": "success",
                        "data": {"requests": [request_data]}
                    })

                elif action == "text":
                    try:
                        raw_json = '''
                        {
                        "model": "cnshenyang/qwen3-nothink:14b",
                        "prompt": "–Ø —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–¥–∞–º —Ç–µ–±–µ —Ç–µ–∫—Å—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –¢—ã –¥–æ–ª–∂–µ–Ω –≤—ã–≤–µ—Å—Ç–∏ —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç –≤ –≤–∏–¥–µ –ø–∏—Å—å–º–∞ –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–µ–≥–æ/–≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–µ–π. –°–æ–±–ª—é–¥–∞–π –º–æ—Ä–∞–ª—å –∏ —Å—Ç–∞—Ä–∞–π—Å—è —Å–æ–±–ª—é—Å—Ç–∏ –ø–æ–ª–Ω—É—é —Å—Ç–∏–ª–∏—Å—Ç—É –í–µ–ª–∏–∫–æ–π –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–æ–π–Ω—ã. –ù–µ –ø–∏—à–∏ –æ—Ç –ª–∏—Ü–∞ –Ω–µ–º—Ü–µ–≤. –ü–∏—à–∏ –æ—Ç –ª–∏—Ü–∞ —Å–æ–≤–µ—Ç—Å–∫–∏—Ö —Å–æ–ª–¥–∞—Ç.'''+ message.get("text") +'''",
                        "stream": false
                        }
                        '''.strip()

                        headers = {
                            "Content-Type": "application/json"
                        }
                        async with httpx.AsyncClient() as client:
                                response = await client.post(
                                GENERATOR_TEXT_URL,
                                content=raw_json,
                                headers=headers,
                                timeout=300
                            )
                                data = response.json()

                                response.raise_for_status()
                        await websocket.send_json({
                            "status": "success",
                            "message": "–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∑–∞—è–≤–∫–µ",
                            "request_text": data.get("response")
                        })
                    except Exception as e:
                        print(e)
                        await websocket.send_json({
                            "status": "error",
                            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}"
                        })
                        continue

                elif action == "image":
                    try:
                        async with httpx.AsyncClient() as client:
                            response = await client.post(
                                GENERATOR_IMG_URL,
                                json={"prompt": message.get("text"), "steps": 50}  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ prompt
                            )
                            response.raise_for_status()
                    except Exception as e:
                        await websocket.send_json({
                            "status": "error",
                            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}"
                        })
                        continue

                    data = response.json()
                    images_b64 = data.get("images", [])
                    if not images_b64:
                        await websocket.send_json({
                            "status": "error",
                            "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                        })
                        continue

                    image_urls = []
                    for image_b64 in images_b64:
                        filename = f"{uuid.uuid4().hex}.png"
                        filepath = IMAGES_DIR / filename

                        with open(filepath, "wb") as f:
                            f.write(base64.b64decode(image_b64))

                        image_url = f"/static/images/{filename}"

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –∑–∞—è–≤–∫—É
                        new_file = GeneratedFile(
                            file_url=image_url,
                            file_type=FileType.image
                        )
                        db.add(new_file)

                    db.commit()

                    await websocket.send_json({
                        "status": "success",
                        "message": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
                        "image_url": image_url
                    })

                elif action == "music":
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)
                    music_url = f"/static/music/{uuid.uuid4().hex}.mp3"

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –∑–∞—è–≤–∫—É
                    new_file = GeneratedFile(
                        request_id=request.id,
                        file_url=music_url,
                        file_type=FileType.music
                    )
                    db.add(new_file)
                    db.commit()

                    await websocket.send_json({
                        "status": "success",
                        "message": "–ú—É–∑—ã–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞)",
                        "music_url": music_url,
                        "request_text": request.text
                    })

                elif action == "get_files":
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏
                    files = db.query(GeneratedFile).filter(
                        GeneratedFile.request_id == request.id
                    ).all()

                    await websocket.send_json({
                        "status": "success",
                        "files": [{
                            "url": file.file_url,
                            "type": file.file_type
                        } for file in files],
                        "request_text": request.text
                    })

                else:
                    await websocket.send_json({
                        "status": "error",
                        "message": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
                    })

            except json.JSONDecodeError:
                await websocket.send_json({
                    "status": "error",
                    "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON"
                })
            except Exception as e:
                await websocket.send_json({
                    "status": "error",
                    "message": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
                })

    except WebSocketDisconnect:
        print(f"{user_login} –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
    finally:
        db.close()
